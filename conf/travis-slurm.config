/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Configuration for Travis CI automated testing
 * -------------------------------------------------
 */


params {
  genome = 'smallGRCh37'
  genome_base = 'References/smallGRCh37'
  runTime       = 2.h
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

process {
  cpus = 5
  executor = 'slurm'
  memory = 17.GB
  time = 2.h

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  withName:BuildBWAindexes {
  }
  withName:BuildReferenceIndex {
  }
  withName:BuildSAMToolsIndex {
  }
  withName:BuildVCFIndex {
  }
  withName:ConcatVCF {
  }
  withName:CreateRecalibrationTable {
    
  }
  withName:MapReads {
    time = {params.runTime * task.attempt}
  }
  withName:MarkDuplicates {
		// Actually the -Xmx value should be kept lower
    memory = {2 * params.singleCPUMem}
  }
  withName:MergeBams {
    memory = {params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RecalibrateBam {
    memory = {params.singleCPUMem * 8 * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RunAlleleCount {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  withName:RunAscat {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  withName:RunBamQC {
  }
  withName:RunBcftoolsStats {
    cpus = 1
  }
  withName:RunConvertAlleleCounts {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  withName:RunFastQC {
    cpus = 2 // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RunHaplotypecaller {
    cpus = 1
    // Increase memory quadratically
    memory = {params.singleCPUMem * task.attempt * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunGenotypeGVCFs {
    cpus = 1
    memory = {params.singleCPUMem}
  }
  withName:RunManta {
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunSamtoolsStats {
    cpus = 1
    time = {params.runTime * task.attempt}
  }
  withName:RunSingleManta {
  }
  withName:RunSingleStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunSnpeff {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunVEP {
    cpus = 1
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
} 
